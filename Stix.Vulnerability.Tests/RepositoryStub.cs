using Stix.Core.Interfaces;
using Stix.Core;
using Stix.Vulnerability.Models;
using System.Linq.Expressions;

namespace Stix.Vulnerability.Tests
{
    public class RepositoryStub : IRepository
    {
        private readonly List<VulnerabilityEntity> _store = new();
        public ValueTask Create<T>(T entity) where T : EntityBase
        {
            if (entity is VulnerabilityEntity vulnerabilityEntity == false)
                throw new ArgumentNullException();

            _store.Add(vulnerabilityEntity);

            return ValueTask.CompletedTask;
        }

        public ValueTask Delete<T>(string id) where T : EntityBase
        {
            _store.RemoveAll(c => c.id == id);
            return ValueTask.CompletedTask;
        }

        public ValueTask<T?> GetById<T>(string id) where T : EntityBase
        {
            var vulnerabilityEntity = _store.Find(c => c.id == id);
            if (vulnerabilityEntity is T tItem)
                return new ValueTask<T?>(tItem);

            return default;
        }

        public ValueTask<List<T>> QueryAsync<T>(Expression<Func<T, bool>> filterPredicate, int skip, int take, Expression<Func<T, object>> orderBy) where T : EntityBase
        {
            if (filterPredicate is Expression<Func<VulnerabilityEntity, bool>> vulnerabilityExpression && orderBy is Expression<Func<VulnerabilityEntity, object>> orderByExpression)
            {
                var items = _store
                    .Where(vulnerabilityExpression.Compile())
                    .OrderByDescending(orderByExpression.Compile())
                    .Skip(skip)
                    .Take(take);

                var vulnerabilityEntities = items.ToList();

                if (vulnerabilityEntities is List<T> tItemList)
                    return new ValueTask<List<T>>(tItemList);
            }

            throw new ArgumentException("T is not VulnerabilityEntity");
        }

        public ValueTask Replace<T>(T entity) where T : EntityBase
        {
            if (entity is VulnerabilityEntity vulnerabilityEntity == false)
                throw new ArgumentNullException();

            _store.RemoveAll(c => c.id == vulnerabilityEntity.id);
            _store.Add(vulnerabilityEntity);

            return ValueTask.CompletedTask;
        }
    }
}