using FluentValidation;
using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Moq;
using NUnit.Framework;
using Shouldly;
using Stix.Contracts.Vulnerability.Requests;
using Stix.Core;
using Stix.Core.Interfaces;
using Stix.Vulnerability.Models;

namespace Stix.Vulnerability.Tests
{
    public class GetAllVulnerabilitiesTests
    {
        private ServiceProvider _serviceProvider;

        [SetUp]
        public void Setup()
        {
            IServiceCollection services = new ServiceCollection();

            var requestingUserMock = new Mock<IRequestingUser>();
            requestingUserMock.Setup(m => m.GetUserName()).Returns("Fake user");

            services.AddMediatR(config =>
                {
                    config.RegisterServicesFromAssemblyContaining<Stix.Vulnerability.ReflectionTarget>();
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.ValidationPipeline<,>));
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.ExceptionHandlerPipeline<,>));
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.AuditPipeline<,>));
                })

                .AddValidatorsFromAssemblyContaining<Stix.Vulnerability.ReflectionTarget>()
                .AddAutoMapper(typeof(Stix.Vulnerability.ReflectionTarget))
                .AddSingleton<IRepository, RepositoryStub>()
                .AddSingleton<IRequestingUser>(requestingUserMock.Object);

            _serviceProvider = services.BuildServiceProvider();
        }

        [Test]
        public async Task GetAllVulnerabilities_FailsInputValidation()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            try
            {
                var response = await mediator.Send(new GetAllVulnerabilities { Skip = 1, Take = -1 });
            }
            catch (Exception e)
            {
                e.ShouldBeOfType(typeof(ValidationErrorException));
                return;
            }

            true.ShouldBeFalse();
        }

        [Test]
        public async Task GetAllVulnerabilities_ReturnsAll()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            var repository = scope.ServiceProvider.GetRequiredService<IRepository>();

            await repository.Create(new VulnerabilityEntity("vulnerability1", "vulnerability1"));
            await repository.Create(new VulnerabilityEntity("vulnerability2", "vulnerability2"));
            await repository.Create(new VulnerabilityEntity("vulnerability3", "vulnerability3"));

            var response = await mediator.Send(new GetAllVulnerabilities());

            response.Data.ShouldNotBeNull();
            response.Data.Count.ShouldBe(3);
        }

        [Test]
        public async Task GetAllVulnerabilities_SkipsFirstReturnsOne()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            var repository = scope.ServiceProvider.GetRequiredService<IRepository>();

            await repository.Create(new VulnerabilityEntity("vulnerability1", "vulnerability1"));
            await repository.Create(new VulnerabilityEntity("vulnerability2", "vulnerability2"));
            await repository.Create(new VulnerabilityEntity("vulnerability3", "vulnerability3"));

            var response = await mediator.Send(new GetAllVulnerabilities { Skip = 1, Take = 1 });

            response.Data.ShouldNotBeNull();
            response.Data.ShouldHaveSingleItem();
            response.Data[0].ShouldNotBeNull();
            response.Data[0].Id.ShouldBe("vulnerability2");
        }
    }
}
