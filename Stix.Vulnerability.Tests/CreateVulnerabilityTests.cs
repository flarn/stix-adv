using FluentValidation;
using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Moq;
using NUnit.Framework;
using Shouldly;
using Stix.Contracts.Vulnerability.Requests;
using Stix.Core;
using Stix.Core.Interfaces;

namespace Stix.Vulnerability.Tests
{
    public class CreateVulnerabilityTests
    {
        private ServiceProvider _serviceProvider;

        [SetUp]
        public void Setup()
        {
            IServiceCollection services = new ServiceCollection();

            var requestingUserMock = new Mock<IRequestingUser>();
            requestingUserMock.Setup(m => m.GetUserName()).Returns("Fake user");

            services.AddMediatR(config =>
                {
                    config.RegisterServicesFromAssemblyContaining<Stix.Vulnerability.ReflectionTarget>();
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.ValidationPipeline<,>));
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.ExceptionHandlerPipeline<,>));
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.AuditPipeline<,>));
                })

                .AddValidatorsFromAssemblyContaining<Stix.Vulnerability.ReflectionTarget>()
                .AddAutoMapper(typeof(Stix.Vulnerability.ReflectionTarget))
                .AddSingleton<IRepository, RepositoryStub>()
                .AddSingleton(requestingUserMock.Object);

            _serviceProvider = services.BuildServiceProvider();
        }

        [Test]
        public async Task CreateVulnerability_FailsInputValidation()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            try
            {
                var response = await mediator.Send(new CreateVulnerability() { Name = null, Description = null });
            }
            catch (Exception e)
            {
                e.ShouldBeOfType(typeof(ValidationErrorException));
                return;
            }

            true.ShouldBeFalse();
        }

        [Test]
        public async Task CreateVulnerabilityEmptyWithLabels_FailsInputValidation()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            try
            {
                var response = await mediator.Send(new CreateVulnerability() { Name = "Vulnerability with empty labels", Description = null, Labels = new List<string>() });
            }
            catch (Exception e)
            {
                e.ShouldBeOfType(typeof(ValidationErrorException));
                return;
            }

            true.ShouldBeFalse();
        }

        [Test]
        public async Task CreateVulnerability_ReturnsIdOfCreatedVulnerability()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            var response = await mediator.Send(new CreateVulnerability() { Name = "Name of vulnerability", Description = "Description of vulnerability" });

            response.Data.ShouldNotBeNull();
            response.Data.ShouldStartWith("vulnerability--");
        }

        [Test]
        public async Task CreateAndGetVulnerability_ReturnsCreatedVulnerability()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            var createRequest = new CreateVulnerability() { Name = "Name of vulnerability", Description = "Description of vulnerability" };

            var createVulnerabilityResponse = await mediator.Send(createRequest);

            var getVulnerabilityResponse = await mediator.Send(new GetVulnerability { id = createVulnerabilityResponse.Data });

            getVulnerabilityResponse.Data.ShouldNotBeNull();
            getVulnerabilityResponse.Data.Id.ShouldNotBeNull();
            getVulnerabilityResponse.Data.Id.ShouldBe(createVulnerabilityResponse.Data);
            getVulnerabilityResponse.Data.Name.ShouldBe(createRequest.Name);
            getVulnerabilityResponse.Data.Description.ShouldBe(createRequest.Description);
        }
    }
}
