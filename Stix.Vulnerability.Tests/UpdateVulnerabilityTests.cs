using FluentValidation;
using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Moq;
using NUnit.Framework;
using Shouldly;
using Stix.Contracts.Vulnerability.Requests;
using Stix.Contracts.Vulnerability.Responses;
using Stix.Core;
using Stix.Core.Interfaces;
using Stix.Vulnerability.Models;

namespace Stix.Vulnerability.Tests
{
    public class UpdateVulnerabilityTests
    {
        private ServiceProvider _serviceProvider;

        [SetUp]
        public void Setup()
        {
            IServiceCollection services = new ServiceCollection();

            var requestingUserMock = new Mock<IRequestingUser>();
            requestingUserMock.Setup(m => m.GetUserName()).Returns("Fake user");


            services.AddMediatR(config =>
                {
                    config.RegisterServicesFromAssemblyContaining<Stix.Vulnerability.ReflectionTarget>();
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.ValidationPipeline<,>));
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.ExceptionHandlerPipeline<,>));
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.AuditPipeline<,>));
                })

                .AddValidatorsFromAssemblyContaining<Stix.Vulnerability.ReflectionTarget>()
                .AddAutoMapper(typeof(Stix.Vulnerability.ReflectionTarget))
                .AddSingleton<IRepository, RepositoryStub>()
                .AddSingleton<IRequestingUser>(requestingUserMock.Object);

            _serviceProvider = services.BuildServiceProvider();
        }

        [Test]
        public async Task UpdateNonExistentVulnerability_FailsWithEntityNotFoundException()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            try
            {
                var response = await mediator.Send(new UpdateVulnerability { Id = "vulnerability--fec8d5d6-f77d-468e-9545-54bc42eb417e", Name = "Name of vulnerability" });
            }
            catch (Exception e)
            {
                e.ShouldBeOfType(typeof(EntityNotFoundException));
                return;
            }

            true.ShouldBeFalse();
        }

        [Test]
        public async Task UpdateNonExistentVulnerability_FailsWithValidationError()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            try
            {
                var response = await mediator.Send(new UpdateVulnerability { Id = "vulnerability--fec8d5d6-f77d-468e-9545-54bc42eb417e", Name = null, Description = "Optional description" });
            }
            catch (Exception e)
            {
                e.ShouldBeOfType(typeof(ValidationErrorException));
                return;
            }

            true.ShouldBeFalse();
        }

        [Test]
        public async Task UpdateVulnerability_ReturnsUpdateVulnerabilityResponse()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            var repository = scope.ServiceProvider.GetRequiredService<IRepository>();

            var createVulnerabilityRequest = new CreateVulnerability { Name = "Name before update", Description = null };

            var createVulnerabilityResponse = await mediator.Send(createVulnerabilityRequest);

            createVulnerabilityResponse.Data.ShouldNotBeNull();

            var updateVulnerability = new UpdateVulnerability { Id = createVulnerabilityResponse.Data, Name = "Name after update", Description = "Optional description" };

            var response = await mediator.Send(updateVulnerability);

            var vulnerabilityAfterUpdate = await repository.GetById<VulnerabilityEntity>(createVulnerabilityResponse.Data);

            response.ShouldBeOfType(typeof(UpdateVulnerabilityResponse));
            vulnerabilityAfterUpdate.ShouldNotBeNull();
            vulnerabilityAfterUpdate.Name.ShouldBe(updateVulnerability.Name);
            vulnerabilityAfterUpdate.Modified.ShouldNotBeNull();
        }
    }
}
