using FluentValidation;
using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Moq;
using NUnit.Framework;
using Shouldly;
using Stix.Contracts.Vulnerability.Requests;
using Stix.Core;
using Stix.Core.Interfaces;
using Stix.Vulnerability.Models;

namespace Stix.Vulnerability.Tests
{
    public class GetVulnerabilityTests
    {
        private IServiceProvider _serviceProvider;

        [SetUp]
        public void Setup()
        {
            IServiceCollection services = new ServiceCollection();
            var repositoryMock = new Mock<IRepository>();
            repositoryMock
                .Setup(m => m.GetById<VulnerabilityEntity>("vulnerability--40ae02e3-149a-4b74-b52c-d6472c7929d5"))
                .ReturnsAsync(new VulnerabilityEntity("vulnerability--40ae02e3-149a-4b74-b52c-d6472c7929d5", "Mock vulnerability 1"));

            services.AddMediatR(config =>
                {
                    config.RegisterServicesFromAssemblyContaining<Stix.Vulnerability.ReflectionTarget>();
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.ValidationPipeline<,>));
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.ExceptionHandlerPipeline<,>));
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.AuditPipeline<,>));
                })

                .AddValidatorsFromAssemblyContaining<Stix.Vulnerability.ReflectionTarget>()
                .AddAutoMapper(typeof(Stix.Vulnerability.ReflectionTarget))
                .AddSingleton<IRepository>(repositoryMock.Object);

            _serviceProvider = services.BuildServiceProvider();
        }

        [Test]
        public async Task GetSingleVulnerability_FailsInputValidation()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            try
            {
                var response = await mediator.Send(new GetVulnerability() { id = null });
            }
            catch (Exception e)
            {
                e.ShouldBeOfType(typeof(ValidationErrorException));
                return;
            }
            true.ShouldBeFalse();
        }

        [Test]
        public async Task GetSingleVulnerability_ReturnsVulnerability()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            var response = await mediator.Send(new GetVulnerability() { id = "vulnerability--40ae02e3-149a-4b74-b52c-d6472c7929d5" });
            response.Data.ShouldNotBeNull();
            response.Data.Id.ShouldBe("vulnerability--40ae02e3-149a-4b74-b52c-d6472c7929d5");
        }
    }
}