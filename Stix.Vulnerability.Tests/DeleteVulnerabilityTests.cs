using FluentValidation;
using MediatR;
using Microsoft.Extensions.DependencyInjection;
using NUnit.Framework;
using Shouldly;
using Stix.Contracts.Vulnerability.Requests;
using Stix.Contracts.Vulnerability.Responses;
using Stix.Core;
using Stix.Core.Interfaces;
using Stix.Vulnerability.Models;

namespace Stix.Vulnerability.Tests
{
    public class DeleteVulnerabilityTests
    {
        private ServiceProvider _serviceProvider;

        [SetUp]
        public void Setup()
        {
            IServiceCollection services = new ServiceCollection();


            services.AddMediatR(config =>
                {
                    config.RegisterServicesFromAssemblyContaining<Stix.Vulnerability.ReflectionTarget>();
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.ValidationPipeline<,>));
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.ExceptionHandlerPipeline<,>));
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.AuditPipeline<,>));
                })

                .AddValidatorsFromAssemblyContaining<Stix.Vulnerability.ReflectionTarget>()
                .AddAutoMapper(typeof(Stix.Vulnerability.ReflectionTarget))
                .AddSingleton<IRepository, RepositoryStub>();

            _serviceProvider = services.BuildServiceProvider();
        }

        [Test]
        public async Task DeleteVulnerabilities_FailsInputValidation()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            try
            {
                var response = await mediator.Send(new DeleteVulnerability { id = "not-correct-id" });
            }
            catch (Exception e)
            {
                e.ShouldBeOfType(typeof(ValidationErrorException));
                return;
            }

            true.ShouldBeFalse();
        }

        [Test]
        public async Task DeleteNonExistentVulnerabilities_FailsWithEntityNotFoundException()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

            try
            {
                var response = await mediator.Send(new DeleteVulnerability { id = "vulnerability--24d7535e-e3f2-4781-884c-ac08bf16ee2c" });
            }
            catch (Exception e)
            {
                e.ShouldBeOfType(typeof(EntityNotFoundException));
                return;
            }

            true.ShouldBeFalse();
        }

        [Test]
        public async Task DeleteVulnerabilities_ReturnsVulnerabilityDeletedResponse()
        {
            await using var scope = _serviceProvider.CreateAsyncScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            var repository = scope.ServiceProvider.GetRequiredService<IRepository>();

            var vulnerability = new VulnerabilityEntity("vulnerability--ad90c76d-f293-4173-a259-e7d57f731510", "name of vulnerability to delete");
            await repository.Create(vulnerability);

            var response = await mediator.Send(new DeleteVulnerability { id = vulnerability.id });

            response.ErrorMessage.ShouldBeNull();
            response.ValidationError.ShouldBeNull();
            response.ShouldBeOfType(typeof(DeleteVulnerabilityResponse));
        }
    }
}
