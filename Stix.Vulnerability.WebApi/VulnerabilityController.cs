using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Stix.Contracts.Vulnerability.Requests;
using Stix.Contracts.Vulnerability.Responses;

namespace Stix.Vulnerability.WebApi
{
    [Route("vulnerability")]
    public class VulnerabilityController : ControllerBase
    {
        private readonly IMediator _mediator;

        public VulnerabilityController(IMediator mediator) => _mediator = mediator;

        [HttpGet("{id}")]
        [Authorize(Policy = "Read")]
        public Task<GetVulnerabilityResponse> Get([FromRoute] GetVulnerability request, CancellationToken cancellationToken) => _mediator.Send(request, cancellationToken);

        [HttpGet]
        [Authorize(Policy = "Read")]
        public Task<GetAllVulnerabilitiesResponse> GetAll([FromQuery] GetAllVulnerabilities request, CancellationToken cancellationToken) => _mediator.Send(request, cancellationToken);

        [Authorize(Policy = "Modify")]
        [HttpPost]
        public Task<CreateVulnerabilityResponse> Create([FromBody] CreateVulnerability request, CancellationToken cancellationToken) => _mediator.Send(request, cancellationToken);

        [Authorize(Policy = "Modify")]
        [HttpPut("{id}")]
        public Task<UpdateVulnerabilityResponse> Update([FromRoute] string id, [FromBody] UpdateVulnerability request, CancellationToken cancellationToken)
        {

            request.Id = id;
            return _mediator.Send(request, cancellationToken);
        }

        [Authorize(Policy = "Modify")]
        [HttpDelete("{id}")]
        public Task<DeleteVulnerabilityResponse> Delete([FromRoute] DeleteVulnerability request, CancellationToken cancellation) => _mediator.Send(request, cancellation);
    }
}