using FluentValidation;
using Stix.CosmosDb;
using Stix.Web.Common.Filters;
using AutoMapper;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Stix.Contracts.Vulnerability.Requests;
using Stix.Contracts.Vulnerability.Responses;
using Stix.Web.Common.Auth;
using Stix.Core.Interfaces;
using Stix.Web.Common;

namespace Stix.Vulnerability.WebApi
{
    public class Program
    {
        public static async Task Main(string[] args) => await CreateHostBuilder(args).RunAsync();

        public static WebApplication CreateHostBuilder(params string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            builder.Services
                .AddHttpContextAccessor()
                .AddControllers(options =>
                {
                    options.Filters.Add<ValidationErrorFilter>();
                    options.Filters.Add<GlobalExceptionFilter>();
                })
                .AddJsonOptions(options =>
                {
                    options.JsonSerializerOptions.DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull;
                });

            builder.Services.AddAuth0(builder.Configuration);

            builder.Services
                .AddEndpointsApiExplorer()
                .AddSwaggerGen()

                .AddMediatR(config =>
                {
                    config.RegisterServicesFromAssemblyContaining<Stix.Vulnerability.ReflectionTarget>();
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.ValidationPipeline<,>));
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.ExceptionHandlerPipeline<,>));
                    config.AddOpenBehavior(typeof(Stix.Core.Pipeline.AuditPipeline<,>));
                })

                .AddValidatorsFromAssemblyContaining<Stix.Vulnerability.ReflectionTarget>()
                .AddAutoMapper(typeof(Stix.Vulnerability.ReflectionTarget))
                .AddCosmosDb(builder.Configuration);

            builder.Services.AddSingleton<IRequestingUser, HttpContextRequestingUser>();

            var app = builder.Build();

            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }

            app.UseAuthentication();
            app.UseAuthorization();


            app.MapControllers();

            app.MapGet("/", () => "....");

            //Task<GetVulnerabilityResponse> GetVulnerabilityHandler(GetVulnerability request, IMediator mediator, CancellationToken cancellation)
            //{
            //    return mediator.Send(request, cancellation);
            //}

            //app.MapGet("min/vulnerability/{id}", GetVulnerabilityHandler).WithName("GetVulnerability Minimal Api").RequireAuthorization(policyNames: "Read");

            return app;
        }
    }
}