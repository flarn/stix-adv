using Microsoft.Azure.Functions.Worker;
using MediatR;
using Stix.Contracts.Vulnerability.Responses;
using Stix.Contracts.Vulnerability.Requests;

namespace Stix.Vulnerability.Functions
{
    public class VulnerabilityApi
    {
        private readonly IMediator _mediator;

        public VulnerabilityApi(IMediator mediator) => _mediator = mediator;

        [Function(nameof(Get))]
        //[Authorize(Policy = "Read")]
        public Task<GetVulnerabilityResponse> Get([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "vulnerability/{id}")] GetVulnerability request, CancellationToken cancellationToken) => _mediator.Send(request, cancellationToken);

        [Function(nameof(GetAll))]
        //[Authorize(Policy = "Read")]
        public Task<GetAllVulnerabilitiesResponse> GetAll([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "vulnerability")] GetAllVulnerabilities request, CancellationToken cancellationToken) => _mediator.Send(request, cancellationToken);

        [Function(nameof(Create))]
        //[Authorize(Policy = "Modify")]
        public Task<CreateVulnerabilityResponse> Create([HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "vulnerability")] CreateVulnerability request, CancellationToken cancellationToken) => _mediator.Send(request, cancellationToken);

        [Function(nameof(Update))]
        //[Authorize(Policy = "Modify")]
        public Task<UpdateVulnerabilityResponse> Update([HttpTrigger(AuthorizationLevel.Anonymous, "put", Route = "vulnerability/{id}")] string id, UpdateVulnerability request, CancellationToken cancellationToken)
        {

            request.Id = id;
            return _mediator.Send(request, cancellationToken);
        }

        [Function(nameof(Delete))]
        //[Authorize(Policy = "Modify")]
        public Task<DeleteVulnerabilityResponse> Delete([HttpTrigger(AuthorizationLevel.Anonymous, "delete", Route = "vulnerability/{id}")] DeleteVulnerability request, CancellationToken cancellation) => _mediator.Send(request, cancellation);
    }
}
