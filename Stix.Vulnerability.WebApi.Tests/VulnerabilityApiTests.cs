using System.Linq.Expressions;
using System.Net;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.AspNetCore.TestHost;
using Microsoft.Extensions.DependencyInjection;
using Shouldly;
using Stix.Core;
using Stix.Core.Interfaces;

namespace Stix.Vulnerability.WebApi.Tests
{
    public class Tests
    {
        private HttpClient _client;

        [SetUp]
        public void Setup()
        {
            var application = new WebApplicationFactory<Program>().WithWebHostBuilder(builder =>
            {
                builder.ConfigureTestServices(services =>
                {
                    services.AddSingleton<IRepository, FakeRepo>();


                    //TODO: mock auth

                });

                builder.UseEnvironment("Test");
            });

            _client = application.CreateClient(new WebApplicationFactoryClientOptions() { AllowAutoRedirect = false });
        }

        [Test]
        public async Task Get_Root_ReturnOk()
        {
            var response = await _client.GetAsync("/");

            response.StatusCode.ShouldBe(HttpStatusCode.OK);

            (await response.Content.ReadAsStringAsync()).ShouldBe("....");
        }

        [Test]
        public async Task Get_VulnerabilitiesWithoutAuth_ReturnUnauthorized()
        {
            var response = await _client.GetAsync("/vulnerability/vulnerabilityId");

            response.StatusCode.ShouldBe(HttpStatusCode.Unauthorized);
        }
    }

    public class FakeRepo : IRepository
    {
        public ValueTask Create<T>(T entity) where T : EntityBase
        {
            throw new NotImplementedException();
        }

        public ValueTask Delete<T>(string id) where T : EntityBase
        {
            throw new NotImplementedException();
        }

        public ValueTask<T?> GetById<T>(string id) where T : EntityBase
        {
            return ValueTask.FromResult<T?>(default);
        }

        public ValueTask<List<T>> QueryAsync<T>(Expression<Func<T, bool>> filterPredicate, int skip, int take, Expression<Func<T, object>> orderBy) where T : EntityBase
        {
            throw new NotImplementedException();
        }

        public ValueTask Replace<T>(T entity) where T : EntityBase
        {
            throw new NotImplementedException();
        }
    }
}